package view;

import controller.ClientControl;
import controller.PacketListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import model.Match;
import model.Packet;
import model.User;

/**
 *
 * @author ADMIN
 */
public class HistoryMatchFrame extends javax.swing.JFrame implements PacketListener {

    private User user;
    private ArrayList<Match> listMatch;
    private ClientControl clientCtr;
    
    /**
     * Creates new form FrameHistoryMatch
     */
    public HistoryMatchFrame() {
        initComponents();
    }

    public HistoryMatchFrame(User user, ClientControl clientCtr) {
        initComponents();
        this.user = user;
        this.clientCtr = clientCtr;
        this.clientCtr.addPacketListener(this);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        updateListMatch();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatchHistory = new javax.swing.JTable();
        lbName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout (3).png"))); // NOI18N
        btnClose.setContentAreaFilled(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("SVN-Batman Forever Alternate", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lịch sử đấu của người chơi");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 1050, 80));

        tblMatchHistory.setBackground(new java.awt.Color(204, 255, 255));
        tblMatchHistory.setFont(new java.awt.Font("SVN-Comic Sans MS", 0, 24)); // NOI18N
        tblMatchHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Đối thủ", "Kết quả", "Tỉ số điểm", "Thời gian"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMatchHistory.setGridColor(new java.awt.Color(204, 255, 255));
        tblMatchHistory.setOpaque(false);
        tblMatchHistory.setRowHeight(35);
        jScrollPane1.setViewportView(tblMatchHistory);
        if (tblMatchHistory.getColumnModel().getColumnCount() > 0) {
            tblMatchHistory.getColumnModel().getColumn(0).setResizable(false);
            tblMatchHistory.getColumnModel().getColumn(0).setPreferredWidth(111);
            tblMatchHistory.getColumnModel().getColumn(1).setResizable(false);
            tblMatchHistory.getColumnModel().getColumn(1).setPreferredWidth(111);
            tblMatchHistory.getColumnModel().getColumn(2).setResizable(false);
            tblMatchHistory.getColumnModel().getColumn(2).setPreferredWidth(111);
            tblMatchHistory.getColumnModel().getColumn(3).setResizable(false);
            tblMatchHistory.getColumnModel().getColumn(3).setPreferredWidth(151);
        }
        tblMatchHistory.getTableHeader().setFont(new java.awt.Font("SVN-Comic Sans MS", 1, 24));

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 102, 1050, 600));
        getContentPane().add(lbName, new org.netbeans.lib.awtextra.AbsoluteConstraints(866, 19, 42, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 730));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    public void updateTable() {
        DefaultTableModel model = (DefaultTableModel) tblMatchHistory.getModel();
        model.setRowCount(0);
        for (Match match : this.listMatch) {
            User userEnemy;
            float score, scoreEnemy;
            if (match.getUser1().equals(this.user)) {
                userEnemy = match.getUser2();
                score = match.getScoreUser1();
                scoreEnemy = match.getScoreUser2();
            } else {
                userEnemy = match.getUser1();
                score = match.getScoreUser2();
                scoreEnemy = match.getScoreUser1();
            }
            String ans = "";
            if (score > scoreEnemy)
                ans = "WIN";
            else if (score == scoreEnemy)
                ans = "DRAW";
            else if (score < scoreEnemy)
                ans = "LOSE";
            LocalDateTime startTime = match.getTimeStart();
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String startTimeString = startTime.format(dtf);
            model.addRow(new Object[]{
                    userEnemy.getName(),
                    ans,
                    String.format("%.1f - %.1f", score, scoreEnemy),
                    startTimeString
                });
        }
    }
    
    public void updateListMatch() {
        clientCtr.sendData(new Packet("history", user));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoryMatchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoryMatchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoryMatchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoryMatchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HistoryMatchFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbName;
    private javax.swing.JTable tblMatchHistory;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onPacketReceived(Packet packet) {
        if (null != packet.getHeader()) switch (packet.getHeader()) {
            case "history_ok":
                ArrayList<Match> listMatch = (ArrayList<Match>) packet.getContent();
                Collections.sort(listMatch, new Comparator<Match>() {
                    @Override
                    public int compare(Match o1, Match o2) {
                        return o2.getTimeStart().compareTo(o1.getTimeStart());
                    }
                });
                this.listMatch = listMatch;
                updateTable();
                break;
            default:
                break;
        }
    }
}
